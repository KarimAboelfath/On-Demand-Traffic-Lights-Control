
On-demand Traffic light control.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000008cc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00800060  000008cc  00000960  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000013  00800062  00800062  00000962  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000962  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000994  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000160  00000000  00000000  000009d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001e89  00000000  00000000  00000b30  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000af4  00000000  00000000  000029b9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001031  00000000  00000000  000034ad  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002f0  00000000  00000000  000044e0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000006f1  00000000  00000000  000047d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000891  00000000  00000000  00004ec1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000f0  00000000  00000000  00005752  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 ce 01 	jmp	0x39c	; 0x39c <__vector_1>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 fd 01 	jmp	0x3fa	; 0x3fa <__vector_11>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ec ec       	ldi	r30, 0xCC	; 204
  68:	f8 e0       	ldi	r31, 0x08	; 8
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a2 36       	cpi	r26, 0x62	; 98
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a2 e6       	ldi	r26, 0x62	; 98
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a5 37       	cpi	r26, 0x75	; 117
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 bf 00 	call	0x17e	; 0x17e <main>
  8a:	0c 94 64 04 	jmp	0x8c8	; 0x8c8 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <normalMode>:

// function definitions
uint8_t normalMode(void)
{
	static uint8_t firstTimeFlag = 1;	//Raise a flag when the normal mode is started for the very first time in the application.
	if (firstTimeFlag)
  92:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  96:	88 23       	and	r24, r24
  98:	69 f0       	breq	.+26     	; 0xb4 <normalMode+0x22>
	{
		timer0_init_normalMode(4, 166);	//Initialize and start timer0 in normal mode using 256 prescaler and an initial value of 166
  9a:	66 ea       	ldi	r22, 0xA6	; 166
  9c:	84 e0       	ldi	r24, 0x04	; 4
  9e:	0e 94 3f 04 	call	0x87e	; 0x87e <timer0_init_normalMode>
		fn_Interface3.led_on(carLeds, carGRN); //Turn on Car Green Led
  a2:	e0 91 6d 00 	lds	r30, 0x006D	; 0x80006d <fn_Interface3>
  a6:	f0 91 6e 00 	lds	r31, 0x006E	; 0x80006e <fn_Interface3+0x1>
  aa:	60 e0       	ldi	r22, 0x00	; 0
  ac:	81 e4       	ldi	r24, 0x41	; 65
  ae:	09 95       	icall
		firstTimeFlag = 0;	//Lower flag
  b0:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
	}
	return 1;	//Error state = No error / Function OK
}
  b4:	81 e0       	ldi	r24, 0x01	; 1
  b6:	08 95       	ret

000000b8 <pedMode>:

uint8_t pedMode(void)
{
  b8:	cf 93       	push	r28
	pedMode_active = 1;		//Raise a flag when pedestrian mode is active
  ba:	81 e0       	ldi	r24, 0x01	; 1
  bc:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <pedMode_active>
	//Lower flags (used during pedestrian mode is active)
	pressedAtState0 = 0;	
  c0:	10 92 6f 00 	sts	0x006F, r1	; 0x80006f <pressedAtState0>
	pressedAtState1 = 0;
  c4:	10 92 6b 00 	sts	0x006B, r1	; 0x80006b <pressedAtState1>
	pressedAtState2 = 0;
  c8:	10 92 71 00 	sts	0x0071, r1	; 0x800071 <pressedAtState2>
	endOfStates = 0;
  cc:	10 92 70 00 	sts	0x0070, r1	; 0x800070 <endOfStates>
	switch(state)
  d0:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <state>
  d4:	81 30       	cpi	r24, 0x01	; 1
  d6:	89 f0       	breq	.+34     	; 0xfa <pedMode+0x42>
  d8:	28 f0       	brcs	.+10     	; 0xe4 <pedMode+0x2c>
  da:	82 30       	cpi	r24, 0x02	; 2
  dc:	c9 f0       	breq	.+50     	; 0x110 <pedMode+0x58>
  de:	83 30       	cpi	r24, 0x03	; 3
  e0:	21 f1       	breq	.+72     	; 0x12a <pedMode+0x72>
  e2:	2f c0       	rjmp	.+94     	; 0x142 <pedMode+0x8a>
	{
		case 0:
			fn_Interface3.led_on(pedLeds, pedRED); //Turn on Ped Red Led
  e4:	e0 91 6d 00 	lds	r30, 0x006D	; 0x80006d <fn_Interface3>
  e8:	f0 91 6e 00 	lds	r31, 0x006E	; 0x80006e <fn_Interface3+0x1>
  ec:	62 e0       	ldi	r22, 0x02	; 2
  ee:	82 e4       	ldi	r24, 0x42	; 66
  f0:	09 95       	icall
			pressedAtState0 = 1;	//Raise a flag when the crosswalk button is pressed while the normal mode is in state 0
  f2:	81 e0       	ldi	r24, 0x01	; 1
  f4:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <pressedAtState0>
			break;
  f8:	24 c0       	rjmp	.+72     	; 0x142 <pedMode+0x8a>
		case 1:
			fn_Interface3.led_on(pedLeds, pedYLW); //Turn on Ped Yellow Led
  fa:	e0 91 6d 00 	lds	r30, 0x006D	; 0x80006d <fn_Interface3>
  fe:	f0 91 6e 00 	lds	r31, 0x006E	; 0x80006e <fn_Interface3+0x1>
 102:	61 e0       	ldi	r22, 0x01	; 1
 104:	82 e4       	ldi	r24, 0x42	; 66
 106:	09 95       	icall
			pressedAtState1 = 1;	//Raise a flag when the crosswalk button is pressed while the normal mode is in state 1
 108:	81 e0       	ldi	r24, 0x01	; 1
 10a:	80 93 6b 00 	sts	0x006B, r24	; 0x80006b <pressedAtState1>
			break;
 10e:	19 c0       	rjmp	.+50     	; 0x142 <pedMode+0x8a>
		case 2:
			fn_Interface3.led_on(pedLeds, pedGRN); //Turn on Ped Green Led
 110:	e0 91 6d 00 	lds	r30, 0x006D	; 0x80006d <fn_Interface3>
 114:	f0 91 6e 00 	lds	r31, 0x006E	; 0x80006e <fn_Interface3+0x1>
 118:	60 e0       	ldi	r22, 0x00	; 0
 11a:	82 e4       	ldi	r24, 0x42	; 66
 11c:	09 95       	icall
			pressedAtState2 = 1;	//Raise a flag when the crosswalk button is pressed while the normal mode is in state 2
 11e:	81 e0       	ldi	r24, 0x01	; 1
 120:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <pressedAtState2>
			resetOverFlowOrder = 1;	//Raise a flag to order the timer to reset and start over
 124:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <resetOverFlowOrder>
			break;
 128:	0c c0       	rjmp	.+24     	; 0x142 <pedMode+0x8a>
		case 3:
			state = 1;	//trigger state 1
 12a:	c1 e0       	ldi	r28, 0x01	; 1
 12c:	c0 93 6c 00 	sts	0x006C, r28	; 0x80006c <state>
			fn_Interface3.led_on(pedLeds, pedYLW); //Turn on Ped Yellow Led
 130:	e0 91 6d 00 	lds	r30, 0x006D	; 0x80006d <fn_Interface3>
 134:	f0 91 6e 00 	lds	r31, 0x006E	; 0x80006e <fn_Interface3+0x1>
 138:	61 e0       	ldi	r22, 0x01	; 1
 13a:	82 e4       	ldi	r24, 0x42	; 66
 13c:	09 95       	icall
			pressedAtState1 = 1;	//Raise a flag when the crosswalk button is pressed while the normal mode is in state 1
 13e:	c0 93 6b 00 	sts	0x006B, r28	; 0x80006b <pressedAtState1>
			break;
	}
	return 1;	//Error state = No error / Function OK
}
 142:	81 e0       	ldi	r24, 0x01	; 1
 144:	cf 91       	pop	r28
 146:	08 95       	ret

00000148 <start_application>:

void start_application(void)
{
	while (1)
	{
		normalMode();	//Loop the normal mode
 148:	0e 94 49 00 	call	0x92	; 0x92 <normalMode>
 14c:	fd cf       	rjmp	.-6      	; 0x148 <start_application>

0000014e <BUTTON_init>:
// driver global variables

// function definitions
uint8_t BUTTON_init(uint8_t buttonPort, uint8_t buttonPin) //Set the Button as an Input device
{
	DIO_init(buttonPort, buttonPin, IN); // Button pin set to Input
 14e:	40 e0       	ldi	r20, 0x00	; 0
 150:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <DIO_init>
	return 1;	//Function OK
}
 154:	81 e0       	ldi	r24, 0x01	; 1
 156:	08 95       	ret

00000158 <LED_init>:
// driver global variables

// function definitions
uint8_t LED_init(uint8_t ledPort, uint8_t ledPin) //Initialize LED as an Output device
{
	DIO_init(ledPort, ledPin, OUT); // LED pin set to Output
 158:	41 e0       	ldi	r20, 0x01	; 1
 15a:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <DIO_init>
	return 1;	//Function OK
}
 15e:	81 e0       	ldi	r24, 0x01	; 1
 160:	08 95       	ret

00000162 <LED_on>:
uint8_t LED_on(uint8_t ledPort, uint8_t ledPin) //Turn LED ON
{
	DIO_write(ledPort, ledPin, HIGH); // Write 1 on led pin
 162:	41 e0       	ldi	r20, 0x01	; 1
 164:	0e 94 5f 01 	call	0x2be	; 0x2be <DIO_write>
	return 1;	//Function OK
}
 168:	81 e0       	ldi	r24, 0x01	; 1
 16a:	08 95       	ret

0000016c <LED_off>:
uint8_t LED_off(uint8_t ledPort, uint8_t ledPin) //Turn LED OFF
{
	DIO_write(ledPort, ledPin, LOW); // Write 0 on led pin
 16c:	40 e0       	ldi	r20, 0x00	; 0
 16e:	0e 94 5f 01 	call	0x2be	; 0x2be <DIO_write>
	return 1;	//Function OK
}
 172:	81 e0       	ldi	r24, 0x01	; 1
 174:	08 95       	ret

00000176 <LED_toggle>:
uint8_t LED_toggle(uint8_t ledPort, uint8_t ledPin)	//Toggle LED
{
	DIO_toggle(ledPort, ledPin); // Toggle led
 176:	0e 94 a4 01 	call	0x348	; 0x348 <DIO_toggle>
	return 1;	//Function OK
}
 17a:	81 e0       	ldi	r24, 0x01	; 1
 17c:	08 95       	ret

0000017e <main>:
void DIO_driver_test_module(void);

int main(void)
{
	//Define pointers to the functions interfaces and initialize them with the addresses of the higher-layer functions implementations.
	fn_Interface.led_toggle = LED_toggle;
 17e:	8b eb       	ldi	r24, 0xBB	; 187
 180:	90 e0       	ldi	r25, 0x00	; 0
 182:	90 93 68 00 	sts	0x0068, r25	; 0x800068 <fn_Interface+0x1>
 186:	80 93 67 00 	sts	0x0067, r24	; 0x800067 <fn_Interface>
	fn_Interface2.led_off = LED_off;
 18a:	86 eb       	ldi	r24, 0xB6	; 182
 18c:	90 e0       	ldi	r25, 0x00	; 0
 18e:	90 93 6a 00 	sts	0x006A, r25	; 0x80006a <fn_Interface2+0x1>
 192:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <fn_Interface2>
	fn_Interface3.led_on = LED_on;
 196:	81 eb       	ldi	r24, 0xB1	; 177
 198:	90 e0       	ldi	r25, 0x00	; 0
 19a:	90 93 6e 00 	sts	0x006E, r25	; 0x80006e <fn_Interface3+0x1>
 19e:	80 93 6d 00 	sts	0x006D, r24	; 0x80006d <fn_Interface3>
	fn_Interface4.pedMode_callback = pedMode;
 1a2:	8c e5       	ldi	r24, 0x5C	; 92
 1a4:	90 e0       	ldi	r25, 0x00	; 0
 1a6:	90 93 74 00 	sts	0x0074, r25	; 0x800074 <fn_Interface4+0x1>
 1aa:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <fn_Interface4>

	//Initialize the LEDs.
	LED_init(carLeds, carGRN);
 1ae:	60 e0       	ldi	r22, 0x00	; 0
 1b0:	81 e4       	ldi	r24, 0x41	; 65
 1b2:	0e 94 ac 00 	call	0x158	; 0x158 <LED_init>
	LED_init(carLeds, carYLW);
 1b6:	61 e0       	ldi	r22, 0x01	; 1
 1b8:	81 e4       	ldi	r24, 0x41	; 65
 1ba:	0e 94 ac 00 	call	0x158	; 0x158 <LED_init>
	LED_init(carLeds, carRED);
 1be:	62 e0       	ldi	r22, 0x02	; 2
 1c0:	81 e4       	ldi	r24, 0x41	; 65
 1c2:	0e 94 ac 00 	call	0x158	; 0x158 <LED_init>
	LED_init(pedLeds, pedGRN);
 1c6:	60 e0       	ldi	r22, 0x00	; 0
 1c8:	82 e4       	ldi	r24, 0x42	; 66
 1ca:	0e 94 ac 00 	call	0x158	; 0x158 <LED_init>
	LED_init(pedLeds, pedYLW);
 1ce:	61 e0       	ldi	r22, 0x01	; 1
 1d0:	82 e4       	ldi	r24, 0x42	; 66
 1d2:	0e 94 ac 00 	call	0x158	; 0x158 <LED_init>
	LED_init(pedLeds, pedRED);
 1d6:	62 e0       	ldi	r22, 0x02	; 2
 1d8:	82 e4       	ldi	r24, 0x42	; 66
 1da:	0e 94 ac 00 	call	0x158	; 0x158 <LED_init>
	
	//Initialize the push button.
	BUTTON_init(Actual_buttonPort, Actual_buttonPin);
 1de:	62 e0       	ldi	r22, 0x02	; 2
 1e0:	84 e4       	ldi	r24, 0x44	; 68
 1e2:	0e 94 a7 00 	call	0x14e	; 0x14e <BUTTON_init>
	
	//Initialize external interrupt 0 with a rising edge trigger.
	INT0_externalInterrupt_init_risingEdge();
 1e6:	0e 94 c3 01 	call	0x386	; 0x386 <INT0_externalInterrupt_init_risingEdge>
	
    while (1)	//Main loop
    {
		start_application();	//start the application
 1ea:	0e 94 a4 00 	call	0x148	; 0x148 <start_application>
 1ee:	fd cf       	rjmp	.-6      	; 0x1ea <main+0x6c>

000001f0 <DIO_init>:

// function definitions 

uint8_t DIO_init(uint8_t portNumber, uint8_t pinNumber, uint8_t direction) // Initialize DIO direction (Input or Output)
{
	switch(portNumber)
 1f0:	82 34       	cpi	r24, 0x42	; 66
 1f2:	19 f1       	breq	.+70     	; 0x23a <DIO_init+0x4a>
 1f4:	84 34       	cpi	r24, 0x44	; 68
 1f6:	f1 f1       	breq	.+124    	; 0x274 <DIO_init+0x84>
 1f8:	81 34       	cpi	r24, 0x41	; 65
 1fa:	09 f0       	breq	.+2      	; 0x1fe <DIO_init+0xe>
 1fc:	58 c0       	rjmp	.+176    	; 0x2ae <DIO_init+0xbe>
	{
		case PORT_A:
			if(direction == IN)
 1fe:	41 11       	cpse	r20, r1
 200:	0d c0       	rjmp	.+26     	; 0x21c <DIO_init+0x2c>
			{
				CLEAR_BIT(DDRA, pinNumber); // Input
 202:	2a b3       	in	r18, 0x1a	; 26
 204:	81 e0       	ldi	r24, 0x01	; 1
 206:	90 e0       	ldi	r25, 0x00	; 0
 208:	02 c0       	rjmp	.+4      	; 0x20e <DIO_init+0x1e>
 20a:	88 0f       	add	r24, r24
 20c:	99 1f       	adc	r25, r25
 20e:	6a 95       	dec	r22
 210:	e2 f7       	brpl	.-8      	; 0x20a <DIO_init+0x1a>
 212:	80 95       	com	r24
 214:	82 23       	and	r24, r18
 216:	8a bb       	out	0x1a, r24	; 26
				return 1;	//Function OK
 218:	81 e0       	ldi	r24, 0x01	; 1
 21a:	08 95       	ret
			}
			else if(direction == OUT)
 21c:	41 30       	cpi	r20, 0x01	; 1
 21e:	09 f0       	breq	.+2      	; 0x222 <DIO_init+0x32>
 220:	48 c0       	rjmp	.+144    	; 0x2b2 <DIO_init+0xc2>
			{
				SET_BIT(DDRA, pinNumber);   // Output
 222:	2a b3       	in	r18, 0x1a	; 26
 224:	81 e0       	ldi	r24, 0x01	; 1
 226:	90 e0       	ldi	r25, 0x00	; 0
 228:	02 c0       	rjmp	.+4      	; 0x22e <DIO_init+0x3e>
 22a:	88 0f       	add	r24, r24
 22c:	99 1f       	adc	r25, r25
 22e:	6a 95       	dec	r22
 230:	e2 f7       	brpl	.-8      	; 0x22a <DIO_init+0x3a>
 232:	82 2b       	or	r24, r18
 234:	8a bb       	out	0x1a, r24	; 26
				return 1;	//Function OK
 236:	81 e0       	ldi	r24, 0x01	; 1
 238:	08 95       	ret
			{
					return 0;	//Function Error
			}
		break;
		case PORT_B:
		if(direction == IN)
 23a:	41 11       	cpse	r20, r1
 23c:	0d c0       	rjmp	.+26     	; 0x258 <DIO_init+0x68>
		{
			CLEAR_BIT(DDRB, pinNumber); // Input
 23e:	27 b3       	in	r18, 0x17	; 23
 240:	81 e0       	ldi	r24, 0x01	; 1
 242:	90 e0       	ldi	r25, 0x00	; 0
 244:	02 c0       	rjmp	.+4      	; 0x24a <DIO_init+0x5a>
 246:	88 0f       	add	r24, r24
 248:	99 1f       	adc	r25, r25
 24a:	6a 95       	dec	r22
 24c:	e2 f7       	brpl	.-8      	; 0x246 <DIO_init+0x56>
 24e:	80 95       	com	r24
 250:	82 23       	and	r24, r18
 252:	87 bb       	out	0x17, r24	; 23
			return 1;	//Function OK
 254:	81 e0       	ldi	r24, 0x01	; 1
 256:	08 95       	ret
		}
		else if(direction == OUT)
 258:	41 30       	cpi	r20, 0x01	; 1
 25a:	69 f5       	brne	.+90     	; 0x2b6 <DIO_init+0xc6>
		{
			SET_BIT(DDRB, pinNumber);   // Output
 25c:	27 b3       	in	r18, 0x17	; 23
 25e:	81 e0       	ldi	r24, 0x01	; 1
 260:	90 e0       	ldi	r25, 0x00	; 0
 262:	02 c0       	rjmp	.+4      	; 0x268 <DIO_init+0x78>
 264:	88 0f       	add	r24, r24
 266:	99 1f       	adc	r25, r25
 268:	6a 95       	dec	r22
 26a:	e2 f7       	brpl	.-8      	; 0x264 <DIO_init+0x74>
 26c:	82 2b       	or	r24, r18
 26e:	87 bb       	out	0x17, r24	; 23
			return 1;	//Function OK
 270:	81 e0       	ldi	r24, 0x01	; 1
 272:	08 95       	ret
		{
			return 0;	//Function Error
		}
		break;
		case PORT_D:
		if(direction == IN)
 274:	41 11       	cpse	r20, r1
 276:	0d c0       	rjmp	.+26     	; 0x292 <DIO_init+0xa2>
		{
			CLEAR_BIT(DDRD, pinNumber); // Input
 278:	21 b3       	in	r18, 0x11	; 17
 27a:	81 e0       	ldi	r24, 0x01	; 1
 27c:	90 e0       	ldi	r25, 0x00	; 0
 27e:	02 c0       	rjmp	.+4      	; 0x284 <DIO_init+0x94>
 280:	88 0f       	add	r24, r24
 282:	99 1f       	adc	r25, r25
 284:	6a 95       	dec	r22
 286:	e2 f7       	brpl	.-8      	; 0x280 <DIO_init+0x90>
 288:	80 95       	com	r24
 28a:	82 23       	and	r24, r18
 28c:	81 bb       	out	0x11, r24	; 17
			return 1;	//Function OK
 28e:	81 e0       	ldi	r24, 0x01	; 1
 290:	08 95       	ret
		}
		else if(direction == OUT)
 292:	41 30       	cpi	r20, 0x01	; 1
 294:	91 f4       	brne	.+36     	; 0x2ba <DIO_init+0xca>
		{
			SET_BIT(DDRD, pinNumber);   // Output
 296:	21 b3       	in	r18, 0x11	; 17
 298:	81 e0       	ldi	r24, 0x01	; 1
 29a:	90 e0       	ldi	r25, 0x00	; 0
 29c:	02 c0       	rjmp	.+4      	; 0x2a2 <DIO_init+0xb2>
 29e:	88 0f       	add	r24, r24
 2a0:	99 1f       	adc	r25, r25
 2a2:	6a 95       	dec	r22
 2a4:	e2 f7       	brpl	.-8      	; 0x29e <DIO_init+0xae>
 2a6:	82 2b       	or	r24, r18
 2a8:	81 bb       	out	0x11, r24	; 17
			return 1;	//Function OK
 2aa:	81 e0       	ldi	r24, 0x01	; 1
 2ac:	08 95       	ret
			return 0;	//Function Error
		}
		break;
		default:
		{
			return 1;	//Function OK
 2ae:	81 e0       	ldi	r24, 0x01	; 1
 2b0:	08 95       	ret
				SET_BIT(DDRA, pinNumber);   // Output
				return 1;	//Function OK
			}
			else 
			{
					return 0;	//Function Error
 2b2:	80 e0       	ldi	r24, 0x00	; 0
 2b4:	08 95       	ret
			SET_BIT(DDRB, pinNumber);   // Output
			return 1;	//Function OK
		}
		else
		{
			return 0;	//Function Error
 2b6:	80 e0       	ldi	r24, 0x00	; 0
 2b8:	08 95       	ret
			SET_BIT(DDRD, pinNumber);   // Output
			return 1;	//Function OK
		}
		else
		{
			return 0;	//Function Error
 2ba:	80 e0       	ldi	r24, 0x00	; 0
		default:
		{
			return 1;	//Function OK
		}
	}
}
 2bc:	08 95       	ret

000002be <DIO_write>:
uint8_t DIO_write(uint8_t portNumber, uint8_t pinNumber, uint8_t value) // Write data to DIO (HIGH or LOW) (1 or 0).
{
	switch(portNumber)
 2be:	81 34       	cpi	r24, 0x41	; 65
 2c0:	19 f0       	breq	.+6      	; 0x2c8 <DIO_write+0xa>
 2c2:	82 34       	cpi	r24, 0x42	; 66
 2c4:	f1 f0       	breq	.+60     	; 0x302 <DIO_write+0x44>
 2c6:	3a c0       	rjmp	.+116    	; 0x33c <DIO_write+0x7e>
	{
		case PORT_A:
		if(value == LOW)
 2c8:	41 11       	cpse	r20, r1
 2ca:	0d c0       	rjmp	.+26     	; 0x2e6 <DIO_write+0x28>
		{
			CLEAR_BIT(PORTA, pinNumber); // Write 0
 2cc:	2b b3       	in	r18, 0x1b	; 27
 2ce:	81 e0       	ldi	r24, 0x01	; 1
 2d0:	90 e0       	ldi	r25, 0x00	; 0
 2d2:	02 c0       	rjmp	.+4      	; 0x2d8 <DIO_write+0x1a>
 2d4:	88 0f       	add	r24, r24
 2d6:	99 1f       	adc	r25, r25
 2d8:	6a 95       	dec	r22
 2da:	e2 f7       	brpl	.-8      	; 0x2d4 <DIO_write+0x16>
 2dc:	80 95       	com	r24
 2de:	82 23       	and	r24, r18
 2e0:	8b bb       	out	0x1b, r24	; 27
			return 1;	//Function OK
 2e2:	81 e0       	ldi	r24, 0x01	; 1
 2e4:	08 95       	ret
		}
		else if(value == HIGH)
 2e6:	41 30       	cpi	r20, 0x01	; 1
 2e8:	59 f5       	brne	.+86     	; 0x340 <DIO_write+0x82>
		{
			SET_BIT(PORTA, pinNumber);   // Write 1
 2ea:	2b b3       	in	r18, 0x1b	; 27
 2ec:	81 e0       	ldi	r24, 0x01	; 1
 2ee:	90 e0       	ldi	r25, 0x00	; 0
 2f0:	02 c0       	rjmp	.+4      	; 0x2f6 <DIO_write+0x38>
 2f2:	88 0f       	add	r24, r24
 2f4:	99 1f       	adc	r25, r25
 2f6:	6a 95       	dec	r22
 2f8:	e2 f7       	brpl	.-8      	; 0x2f2 <DIO_write+0x34>
 2fa:	82 2b       	or	r24, r18
 2fc:	8b bb       	out	0x1b, r24	; 27
			return 1;	//Function OK
 2fe:	81 e0       	ldi	r24, 0x01	; 1
 300:	08 95       	ret
		{
			return 0;	//Function Error
		}
		break;
		case PORT_B:
		if(value == LOW)
 302:	41 11       	cpse	r20, r1
 304:	0d c0       	rjmp	.+26     	; 0x320 <DIO_write+0x62>
		{
			CLEAR_BIT(PORTB, pinNumber); // Write 0
 306:	28 b3       	in	r18, 0x18	; 24
 308:	81 e0       	ldi	r24, 0x01	; 1
 30a:	90 e0       	ldi	r25, 0x00	; 0
 30c:	02 c0       	rjmp	.+4      	; 0x312 <DIO_write+0x54>
 30e:	88 0f       	add	r24, r24
 310:	99 1f       	adc	r25, r25
 312:	6a 95       	dec	r22
 314:	e2 f7       	brpl	.-8      	; 0x30e <DIO_write+0x50>
 316:	80 95       	com	r24
 318:	82 23       	and	r24, r18
 31a:	88 bb       	out	0x18, r24	; 24
			return 1;	//Function OK
 31c:	81 e0       	ldi	r24, 0x01	; 1
 31e:	08 95       	ret
		}
		else if(value == HIGH)
 320:	41 30       	cpi	r20, 0x01	; 1
 322:	81 f4       	brne	.+32     	; 0x344 <DIO_write+0x86>
		{
			SET_BIT(PORTB, pinNumber);   // Write 1
 324:	28 b3       	in	r18, 0x18	; 24
 326:	81 e0       	ldi	r24, 0x01	; 1
 328:	90 e0       	ldi	r25, 0x00	; 0
 32a:	02 c0       	rjmp	.+4      	; 0x330 <DIO_write+0x72>
 32c:	88 0f       	add	r24, r24
 32e:	99 1f       	adc	r25, r25
 330:	6a 95       	dec	r22
 332:	e2 f7       	brpl	.-8      	; 0x32c <DIO_write+0x6e>
 334:	82 2b       	or	r24, r18
 336:	88 bb       	out	0x18, r24	; 24
			return 1;	//Function OK
 338:	81 e0       	ldi	r24, 0x01	; 1
 33a:	08 95       	ret
			return 0;	//Function Error
		}
		break;
		default:
		{
			return 0;	//Function Error
 33c:	80 e0       	ldi	r24, 0x00	; 0
 33e:	08 95       	ret
			SET_BIT(PORTA, pinNumber);   // Write 1
			return 1;	//Function OK
		}
		else
		{
			return 0;	//Function Error
 340:	80 e0       	ldi	r24, 0x00	; 0
 342:	08 95       	ret
			SET_BIT(PORTB, pinNumber);   // Write 1
			return 1;	//Function OK
		}
		else
		{
			return 0;	//Function Error
 344:	80 e0       	ldi	r24, 0x00	; 0
		default:
		{
			return 0;	//Function Error
		}
	}
}
 346:	08 95       	ret

00000348 <DIO_toggle>:
uint8_t DIO_toggle(uint8_t portNumber, uint8_t pinNumber) // Toggle DIO
{
	switch(portNumber)
 348:	81 34       	cpi	r24, 0x41	; 65
 34a:	19 f0       	breq	.+6      	; 0x352 <DIO_toggle+0xa>
 34c:	82 34       	cpi	r24, 0x42	; 66
 34e:	69 f0       	breq	.+26     	; 0x36a <DIO_toggle+0x22>
 350:	18 c0       	rjmp	.+48     	; 0x382 <DIO_toggle+0x3a>
	{
		case PORT_A:
		TOGGLE_BIT(PORTA, pinNumber); //Toggle bit
 352:	2b b3       	in	r18, 0x1b	; 27
 354:	81 e0       	ldi	r24, 0x01	; 1
 356:	90 e0       	ldi	r25, 0x00	; 0
 358:	02 c0       	rjmp	.+4      	; 0x35e <DIO_toggle+0x16>
 35a:	88 0f       	add	r24, r24
 35c:	99 1f       	adc	r25, r25
 35e:	6a 95       	dec	r22
 360:	e2 f7       	brpl	.-8      	; 0x35a <DIO_toggle+0x12>
 362:	82 27       	eor	r24, r18
 364:	8b bb       	out	0x1b, r24	; 27
		return 1;	//Function OK
 366:	81 e0       	ldi	r24, 0x01	; 1
 368:	08 95       	ret
		break;
		case PORT_B:
		TOGGLE_BIT(PORTB, pinNumber); //Toggle bit
 36a:	28 b3       	in	r18, 0x18	; 24
 36c:	81 e0       	ldi	r24, 0x01	; 1
 36e:	90 e0       	ldi	r25, 0x00	; 0
 370:	02 c0       	rjmp	.+4      	; 0x376 <DIO_toggle+0x2e>
 372:	88 0f       	add	r24, r24
 374:	99 1f       	adc	r25, r25
 376:	6a 95       	dec	r22
 378:	e2 f7       	brpl	.-8      	; 0x372 <DIO_toggle+0x2a>
 37a:	82 27       	eor	r24, r18
 37c:	88 bb       	out	0x18, r24	; 24
		return 1;	//Function OK
 37e:	81 e0       	ldi	r24, 0x01	; 1
 380:	08 95       	ret
		break;
		default:
		return 0;	//Function Error
 382:	80 e0       	ldi	r24, 0x00	; 0
	}
}
 384:	08 95       	ret

00000386 <INT0_externalInterrupt_init_risingEdge>:
// function definitions
uint8_t INT0_externalInterrupt_init_risingEdge(void)
{
	// set INT0 to trigger on rising edge
	//SET_BITS(MCUCR, (1 << ISC00) | (1 << ISC01));
	SET_BITS(MCUCR, (1 << 0) | (1 << 1));
 386:	85 b7       	in	r24, 0x35	; 53
 388:	83 60       	ori	r24, 0x03	; 3
 38a:	85 bf       	out	0x35, r24	; 53
	
	//Enable INT0 external interrupt
	//GICR |= (1<<INT0);
	SET_BIT(GICR, 6);
 38c:	8b b7       	in	r24, 0x3b	; 59
 38e:	80 64       	ori	r24, 0x40	; 64
 390:	8b bf       	out	0x3b, r24	; 59
	
	SET_BIT(SREG, 7); // Enable global interrupts
 392:	8f b7       	in	r24, 0x3f	; 63
 394:	80 68       	ori	r24, 0x80	; 128
 396:	8f bf       	out	0x3f, r24	; 63
	return 1;
}
 398:	81 e0       	ldi	r24, 0x01	; 1
 39a:	08 95       	ret

0000039c <__vector_1>:
//ISR implementation of INT0 External Interrupt
ISR(INT0_vect)
{
 39c:	1f 92       	push	r1
 39e:	0f 92       	push	r0
 3a0:	0f b6       	in	r0, 0x3f	; 63
 3a2:	0f 92       	push	r0
 3a4:	11 24       	eor	r1, r1
 3a6:	2f 93       	push	r18
 3a8:	3f 93       	push	r19
 3aa:	4f 93       	push	r20
 3ac:	5f 93       	push	r21
 3ae:	6f 93       	push	r22
 3b0:	7f 93       	push	r23
 3b2:	8f 93       	push	r24
 3b4:	9f 93       	push	r25
 3b6:	af 93       	push	r26
 3b8:	bf 93       	push	r27
 3ba:	ef 93       	push	r30
 3bc:	ff 93       	push	r31
	if (!(pedMode_active || endOfStates))
 3be:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <pedMode_active>
 3c2:	81 11       	cpse	r24, r1
 3c4:	09 c0       	rjmp	.+18     	; 0x3d8 <__vector_1+0x3c>
 3c6:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <endOfStates>
 3ca:	81 11       	cpse	r24, r1
 3cc:	05 c0       	rjmp	.+10     	; 0x3d8 <__vector_1+0x3c>
	{
		fn_Interface4.pedMode_callback();	//Activate Pedestrian Mode if it's not already active nor the endOfStates flag is not raised.
 3ce:	e0 91 73 00 	lds	r30, 0x0073	; 0x800073 <fn_Interface4>
 3d2:	f0 91 74 00 	lds	r31, 0x0074	; 0x800074 <fn_Interface4+0x1>
 3d6:	09 95       	icall
	}
}
 3d8:	ff 91       	pop	r31
 3da:	ef 91       	pop	r30
 3dc:	bf 91       	pop	r27
 3de:	af 91       	pop	r26
 3e0:	9f 91       	pop	r25
 3e2:	8f 91       	pop	r24
 3e4:	7f 91       	pop	r23
 3e6:	6f 91       	pop	r22
 3e8:	5f 91       	pop	r21
 3ea:	4f 91       	pop	r20
 3ec:	3f 91       	pop	r19
 3ee:	2f 91       	pop	r18
 3f0:	0f 90       	pop	r0
 3f2:	0f be       	out	0x3f, r0	; 63
 3f4:	0f 90       	pop	r0
 3f6:	1f 90       	pop	r1
 3f8:	18 95       	reti

000003fa <__vector_11>:

//ISR implementation of timer0 overflow
ISR(TIMER0_OVF_vect)
{
 3fa:	1f 92       	push	r1
 3fc:	0f 92       	push	r0
 3fe:	0f b6       	in	r0, 0x3f	; 63
 400:	0f 92       	push	r0
 402:	11 24       	eor	r1, r1
 404:	2f 93       	push	r18
 406:	3f 93       	push	r19
 408:	4f 93       	push	r20
 40a:	5f 93       	push	r21
 40c:	6f 93       	push	r22
 40e:	7f 93       	push	r23
 410:	8f 93       	push	r24
 412:	9f 93       	push	r25
 414:	af 93       	push	r26
 416:	bf 93       	push	r27
 418:	ef 93       	push	r30
 41a:	ff 93       	push	r31
	static uint16_t overflow_count = 0; //The Overflow Counter
	overflow_count++;
 41c:	40 91 64 00 	lds	r20, 0x0064	; 0x800064 <overflow_count.1634>
 420:	50 91 65 00 	lds	r21, 0x0065	; 0x800065 <overflow_count.1634+0x1>
 424:	4f 5f       	subi	r20, 0xFF	; 255
 426:	5f 4f       	sbci	r21, 0xFF	; 255
 428:	50 93 65 00 	sts	0x0065, r21	; 0x800065 <overflow_count.1634+0x1>
 42c:	40 93 64 00 	sts	0x0064, r20	; 0x800064 <overflow_count.1634>
	static uint8_t pedMode_iterCount = 0; //Iterations count or number of passed states in the current activation of the pedestrian mode.
	
	//if it's the first time for the timer0 overflow ISR to run, set the state to 0.
	static uint8_t initialCallFlag = 1;
	if (initialCallFlag)
 430:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <initialCallFlag.1636>
 434:	88 23       	and	r24, r24
 436:	21 f0       	breq	.+8      	; 0x440 <__EEPROM_REGION_LENGTH__+0x40>
	{ 
		initialCallFlag = 0;
 438:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <initialCallFlag.1636>
		state = 0;
 43c:	10 92 6c 00 	sts	0x006C, r1	; 0x80006c <state>
	}
	
	//Blink the yellow lEDs by toggling them after the timer0 counter overflows 50 times
	if ((overflow_count != 0) && (overflow_count % 50 == 0) && (state == 1 || state == 3))
 440:	41 15       	cp	r20, r1
 442:	51 05       	cpc	r21, r1
 444:	09 f4       	brne	.+2      	; 0x448 <__EEPROM_REGION_LENGTH__+0x48>
 446:	4d c0       	rjmp	.+154    	; 0x4e2 <__EEPROM_REGION_LENGTH__+0xe2>
 448:	9a 01       	movw	r18, r20
 44a:	36 95       	lsr	r19
 44c:	27 95       	ror	r18
 44e:	ab e7       	ldi	r26, 0x7B	; 123
 450:	b4 e1       	ldi	r27, 0x14	; 20
 452:	0e 94 55 04 	call	0x8aa	; 0x8aa <__umulhisi3>
 456:	96 95       	lsr	r25
 458:	87 95       	ror	r24
 45a:	62 e3       	ldi	r22, 0x32	; 50
 45c:	68 9f       	mul	r22, r24
 45e:	90 01       	movw	r18, r0
 460:	69 9f       	mul	r22, r25
 462:	30 0d       	add	r19, r0
 464:	11 24       	eor	r1, r1
 466:	42 17       	cp	r20, r18
 468:	53 07       	cpc	r21, r19
 46a:	d9 f5       	brne	.+118    	; 0x4e2 <__EEPROM_REGION_LENGTH__+0xe2>
 46c:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <state>
 470:	81 30       	cpi	r24, 0x01	; 1
 472:	21 f0       	breq	.+8      	; 0x47c <__EEPROM_REGION_LENGTH__+0x7c>
 474:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <state>
 478:	83 30       	cpi	r24, 0x03	; 3
 47a:	99 f5       	brne	.+102    	; 0x4e2 <__EEPROM_REGION_LENGTH__+0xe2>
	{
		if (pedMode_active || endOfStates)	//If pedestrian mode is active or the endOfStates flag is raised, synchronize the CAR and the PED yellow LEDS and blink (toggle them)
 47c:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <pedMode_active>
 480:	81 11       	cpse	r24, r1
 482:	04 c0       	rjmp	.+8      	; 0x48c <__EEPROM_REGION_LENGTH__+0x8c>
 484:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <endOfStates>
 488:	88 23       	and	r24, r24
 48a:	21 f1       	breq	.+72     	; 0x4d4 <__EEPROM_REGION_LENGTH__+0xd4>
		{
			//Synchronizing the CAR and PED yellow LEDS in the first iteration.
			static uint8_t yellowSync = 0;
			if(!yellowSync)
 48c:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <yellowSync.1637>
 490:	81 11       	cpse	r24, r1
 492:	11 c0       	rjmp	.+34     	; 0x4b6 <__EEPROM_REGION_LENGTH__+0xb6>
			{
				yellowSync = 1;
 494:	81 e0       	ldi	r24, 0x01	; 1
 496:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <yellowSync.1637>
				fn_Interface2.led_off(carLeds, carYLW); //Turn Off Car Yellow Led
 49a:	e0 91 69 00 	lds	r30, 0x0069	; 0x800069 <fn_Interface2>
 49e:	f0 91 6a 00 	lds	r31, 0x006A	; 0x80006a <fn_Interface2+0x1>
 4a2:	61 e0       	ldi	r22, 0x01	; 1
 4a4:	81 e4       	ldi	r24, 0x41	; 65
 4a6:	09 95       	icall
				fn_Interface2.led_off(pedLeds, pedYLW); //Turn Off Ped Yellow Led
 4a8:	e0 91 69 00 	lds	r30, 0x0069	; 0x800069 <fn_Interface2>
 4ac:	f0 91 6a 00 	lds	r31, 0x006A	; 0x80006a <fn_Interface2+0x1>
 4b0:	61 e0       	ldi	r22, 0x01	; 1
 4b2:	82 e4       	ldi	r24, 0x42	; 66
 4b4:	09 95       	icall
			}
			//Toggling the CAR and PED yellow LEDS
			fn_Interface.led_toggle(carLeds, carYLW); //Toggle Car Yellow Led
 4b6:	e0 91 67 00 	lds	r30, 0x0067	; 0x800067 <fn_Interface>
 4ba:	f0 91 68 00 	lds	r31, 0x0068	; 0x800068 <fn_Interface+0x1>
 4be:	61 e0       	ldi	r22, 0x01	; 1
 4c0:	81 e4       	ldi	r24, 0x41	; 65
 4c2:	09 95       	icall
			fn_Interface.led_toggle(pedLeds, pedYLW); //Toggle Ped Yellow Led
 4c4:	e0 91 67 00 	lds	r30, 0x0067	; 0x800067 <fn_Interface>
 4c8:	f0 91 68 00 	lds	r31, 0x0068	; 0x800068 <fn_Interface+0x1>
 4cc:	61 e0       	ldi	r22, 0x01	; 1
 4ce:	82 e4       	ldi	r24, 0x42	; 66
 4d0:	09 95       	icall
	
	//Blink the yellow lEDs by toggling them after the timer0 counter overflows 50 times
	if ((overflow_count != 0) && (overflow_count % 50 == 0) && (state == 1 || state == 3))
	{
		if (pedMode_active || endOfStates)	//If pedestrian mode is active or the endOfStates flag is raised, synchronize the CAR and the PED yellow LEDS and blink (toggle them)
		{
 4d2:	07 c0       	rjmp	.+14     	; 0x4e2 <__EEPROM_REGION_LENGTH__+0xe2>
			fn_Interface.led_toggle(carLeds, carYLW); //Toggle Car Yellow Led
			fn_Interface.led_toggle(pedLeds, pedYLW); //Toggle Ped Yellow Led
		}
		else //If pedestrian mode is NOT active or the endOfStates flag is Lowered, Blink the CAR's yellow LED only.
		{
			fn_Interface.led_toggle(carLeds, carYLW); //Toggle Car Yellow Led
 4d4:	e0 91 67 00 	lds	r30, 0x0067	; 0x800067 <fn_Interface>
 4d8:	f0 91 68 00 	lds	r31, 0x0068	; 0x800068 <fn_Interface+0x1>
 4dc:	61 e0       	ldi	r22, 0x01	; 1
 4de:	81 e4       	ldi	r24, 0x41	; 65
 4e0:	09 95       	icall
		}
	}
	
	//Reset the timer (overflow counter), if the crosswalk button is pressed at state 2 in which the CAR's RED LED is on; to give the pedestrians extra 5 seconds to cross.
	if (pressedAtState2 && resetOverFlowOrder)
 4e2:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <pressedAtState2>
 4e6:	88 23       	and	r24, r24
 4e8:	79 f0       	breq	.+30     	; 0x508 <__EEPROM_REGION_LENGTH__+0x108>
 4ea:	80 91 72 00 	lds	r24, 0x0072	; 0x800072 <resetOverFlowOrder>
 4ee:	88 23       	and	r24, r24
 4f0:	59 f0       	breq	.+22     	; 0x508 <__EEPROM_REGION_LENGTH__+0x108>
	{
		overflow_count = 611;
 4f2:	83 e6       	ldi	r24, 0x63	; 99
 4f4:	92 e0       	ldi	r25, 0x02	; 2
 4f6:	90 93 65 00 	sts	0x0065, r25	; 0x800065 <overflow_count.1634+0x1>
 4fa:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <overflow_count.1634>
		state = 1;
 4fe:	81 e0       	ldi	r24, 0x01	; 1
 500:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <state>
		resetOverFlowOrder = 0;
 504:	10 92 72 00 	sts	0x0072, r1	; 0x800072 <resetOverFlowOrder>
	}
	
	//Check if desired number of overflows have occurred
	if (overflow_count == 611) 
 508:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <overflow_count.1634>
 50c:	90 91 65 00 	lds	r25, 0x0065	; 0x800065 <overflow_count.1634+0x1>
 510:	83 36       	cpi	r24, 0x63	; 99
 512:	92 40       	sbci	r25, 0x02	; 2
 514:	09 f0       	breq	.+2      	; 0x518 <__EEPROM_REGION_LENGTH__+0x118>
 516:	a2 c1       	rjmp	.+836    	; 0x85c <__DATA_REGION_LENGTH__+0x5c>
	{
		// Reset overflow count
		overflow_count = 0;
 518:	10 92 65 00 	sts	0x0065, r1	; 0x800065 <overflow_count.1634+0x1>
 51c:	10 92 64 00 	sts	0x0064, r1	; 0x800064 <overflow_count.1634>

		// Take desired action
		switch(state)
 520:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <state>
 524:	81 30       	cpi	r24, 0x01	; 1
 526:	09 f4       	brne	.+2      	; 0x52a <__EEPROM_REGION_LENGTH__+0x12a>
 528:	68 c0       	rjmp	.+208    	; 0x5fa <__EEPROM_REGION_LENGTH__+0x1fa>
 52a:	38 f0       	brcs	.+14     	; 0x53a <__EEPROM_REGION_LENGTH__+0x13a>
 52c:	82 30       	cpi	r24, 0x02	; 2
 52e:	09 f4       	brne	.+2      	; 0x532 <__EEPROM_REGION_LENGTH__+0x132>
 530:	dc c0       	rjmp	.+440    	; 0x6ea <__EEPROM_REGION_LENGTH__+0x2ea>
 532:	83 30       	cpi	r24, 0x03	; 3
 534:	09 f4       	brne	.+2      	; 0x538 <__EEPROM_REGION_LENGTH__+0x138>
 536:	4c c1       	rjmp	.+664    	; 0x7d0 <__EEPROM_REGION_LENGTH__+0x3d0>
 538:	91 c1       	rjmp	.+802    	; 0x85c <__DATA_REGION_LENGTH__+0x5c>
		{
			case 0:
				if (pedMode_iterCount == 2)
 53a:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__data_end>
 53e:	82 30       	cpi	r24, 0x02	; 2
 540:	b9 f4       	brne	.+46     	; 0x570 <__EEPROM_REGION_LENGTH__+0x170>
				{
					pedMode_iterCount = 0;
 542:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <__data_end>
					fn_Interface2.led_off(pedLeds, pedGRN);	fn_Interface2.led_off(pedLeds, pedYLW);	fn_Interface2.led_off(pedLeds, pedRED);	//Turn Off all PED's LEDs.
 546:	e0 91 69 00 	lds	r30, 0x0069	; 0x800069 <fn_Interface2>
 54a:	f0 91 6a 00 	lds	r31, 0x006A	; 0x80006a <fn_Interface2+0x1>
 54e:	60 e0       	ldi	r22, 0x00	; 0
 550:	82 e4       	ldi	r24, 0x42	; 66
 552:	09 95       	icall
 554:	e0 91 69 00 	lds	r30, 0x0069	; 0x800069 <fn_Interface2>
 558:	f0 91 6a 00 	lds	r31, 0x006A	; 0x80006a <fn_Interface2+0x1>
 55c:	61 e0       	ldi	r22, 0x01	; 1
 55e:	82 e4       	ldi	r24, 0x42	; 66
 560:	09 95       	icall
 562:	e0 91 69 00 	lds	r30, 0x0069	; 0x800069 <fn_Interface2>
 566:	f0 91 6a 00 	lds	r31, 0x006A	; 0x80006a <fn_Interface2+0x1>
 56a:	62 e0       	ldi	r22, 0x02	; 2
 56c:	82 e4       	ldi	r24, 0x42	; 66
 56e:	09 95       	icall
				}
				if (pedMode_active)
 570:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <pedMode_active>
 574:	88 23       	and	r24, r24
 576:	31 f1       	breq	.+76     	; 0x5c4 <__EEPROM_REGION_LENGTH__+0x1c4>
				{
					fn_Interface2.led_off(carLeds, carGRN); //Turn off Car Green Led
 578:	e0 91 69 00 	lds	r30, 0x0069	; 0x800069 <fn_Interface2>
 57c:	f0 91 6a 00 	lds	r31, 0x006A	; 0x80006a <fn_Interface2+0x1>
 580:	60 e0       	ldi	r22, 0x00	; 0
 582:	81 e4       	ldi	r24, 0x41	; 65
 584:	09 95       	icall
					fn_Interface3.led_on(carLeds, carYLW); //Turn on Yellow Led
 586:	e0 91 6d 00 	lds	r30, 0x006D	; 0x80006d <fn_Interface3>
 58a:	f0 91 6e 00 	lds	r31, 0x006E	; 0x80006e <fn_Interface3+0x1>
 58e:	61 e0       	ldi	r22, 0x01	; 1
 590:	81 e4       	ldi	r24, 0x41	; 65
 592:	09 95       	icall
					//*******************************************************************************************
					fn_Interface2.led_off(pedLeds, pedRED); //Turn off Ped Red Led
 594:	e0 91 69 00 	lds	r30, 0x0069	; 0x800069 <fn_Interface2>
 598:	f0 91 6a 00 	lds	r31, 0x006A	; 0x80006a <fn_Interface2+0x1>
 59c:	62 e0       	ldi	r22, 0x02	; 2
 59e:	82 e4       	ldi	r24, 0x42	; 66
 5a0:	09 95       	icall
					fn_Interface3.led_on(pedLeds, pedYLW); //Turn on Ped Yellow Led
 5a2:	e0 91 6d 00 	lds	r30, 0x006D	; 0x80006d <fn_Interface3>
 5a6:	f0 91 6e 00 	lds	r31, 0x006E	; 0x80006e <fn_Interface3+0x1>
 5aa:	61 e0       	ldi	r22, 0x01	; 1
 5ac:	82 e4       	ldi	r24, 0x42	; 66
 5ae:	09 95       	icall
					//*********************
					pedMode_iterCount++;
 5b0:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__data_end>
 5b4:	8f 5f       	subi	r24, 0xFF	; 255
 5b6:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__data_end>
					if(pedMode_iterCount == 2)
 5ba:	82 30       	cpi	r24, 0x02	; 2
 5bc:	c1 f4       	brne	.+48     	; 0x5ee <__EEPROM_REGION_LENGTH__+0x1ee>
					{
						pedMode_active = 0;
 5be:	10 92 66 00 	sts	0x0066, r1	; 0x800066 <pedMode_active>
 5c2:	15 c0       	rjmp	.+42     	; 0x5ee <__EEPROM_REGION_LENGTH__+0x1ee>
					}
				}
				else
				{
					fn_Interface2.led_off(carLeds, carGRN); //Turn off Car Green Led
 5c4:	e0 91 69 00 	lds	r30, 0x0069	; 0x800069 <fn_Interface2>
 5c8:	f0 91 6a 00 	lds	r31, 0x006A	; 0x80006a <fn_Interface2+0x1>
 5cc:	60 e0       	ldi	r22, 0x00	; 0
 5ce:	81 e4       	ldi	r24, 0x41	; 65
 5d0:	09 95       	icall
					fn_Interface3.led_on(carLeds, carYLW); //Turn on Yellow Led
 5d2:	e0 91 6d 00 	lds	r30, 0x006D	; 0x80006d <fn_Interface3>
 5d6:	f0 91 6e 00 	lds	r31, 0x006E	; 0x80006e <fn_Interface3+0x1>
 5da:	61 e0       	ldi	r22, 0x01	; 1
 5dc:	81 e4       	ldi	r24, 0x41	; 65
 5de:	09 95       	icall
					//*******************************************************************************************
					fn_Interface2.led_off(pedLeds, pedRED); //Turn off Ped Red Led
 5e0:	e0 91 69 00 	lds	r30, 0x0069	; 0x800069 <fn_Interface2>
 5e4:	f0 91 6a 00 	lds	r31, 0x006A	; 0x80006a <fn_Interface2+0x1>
 5e8:	62 e0       	ldi	r22, 0x02	; 2
 5ea:	82 e4       	ldi	r24, 0x42	; 66
 5ec:	09 95       	icall
				}
				state++;
 5ee:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <state>
 5f2:	8f 5f       	subi	r24, 0xFF	; 255
 5f4:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <state>
				break;
 5f8:	31 c1       	rjmp	.+610    	; 0x85c <__DATA_REGION_LENGTH__+0x5c>
			case 1:
				if (pedMode_iterCount == 2)
 5fa:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__data_end>
 5fe:	82 30       	cpi	r24, 0x02	; 2
 600:	b9 f4       	brne	.+46     	; 0x630 <__EEPROM_REGION_LENGTH__+0x230>
				{
					pedMode_iterCount = 0;
 602:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <__data_end>
					fn_Interface2.led_off(pedLeds, pedGRN);	fn_Interface2.led_off(pedLeds, pedYLW);	fn_Interface2.led_off(pedLeds, pedRED);	//Turn Off all PED's LEDs.
 606:	e0 91 69 00 	lds	r30, 0x0069	; 0x800069 <fn_Interface2>
 60a:	f0 91 6a 00 	lds	r31, 0x006A	; 0x80006a <fn_Interface2+0x1>
 60e:	60 e0       	ldi	r22, 0x00	; 0
 610:	82 e4       	ldi	r24, 0x42	; 66
 612:	09 95       	icall
 614:	e0 91 69 00 	lds	r30, 0x0069	; 0x800069 <fn_Interface2>
 618:	f0 91 6a 00 	lds	r31, 0x006A	; 0x80006a <fn_Interface2+0x1>
 61c:	61 e0       	ldi	r22, 0x01	; 1
 61e:	82 e4       	ldi	r24, 0x42	; 66
 620:	09 95       	icall
 622:	e0 91 69 00 	lds	r30, 0x0069	; 0x800069 <fn_Interface2>
 626:	f0 91 6a 00 	lds	r31, 0x006A	; 0x80006a <fn_Interface2+0x1>
 62a:	62 e0       	ldi	r22, 0x02	; 2
 62c:	82 e4       	ldi	r24, 0x42	; 66
 62e:	09 95       	icall
				}
				if (pedMode_active)
 630:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <pedMode_active>
 634:	88 23       	and	r24, r24
 636:	09 f4       	brne	.+2      	; 0x63a <__EEPROM_REGION_LENGTH__+0x23a>
 638:	44 c0       	rjmp	.+136    	; 0x6c2 <__EEPROM_REGION_LENGTH__+0x2c2>
				{
					fn_Interface2.led_off(carLeds, carYLW); //Turn off Car Yellow Led
 63a:	e0 91 69 00 	lds	r30, 0x0069	; 0x800069 <fn_Interface2>
 63e:	f0 91 6a 00 	lds	r31, 0x006A	; 0x80006a <fn_Interface2+0x1>
 642:	61 e0       	ldi	r22, 0x01	; 1
 644:	81 e4       	ldi	r24, 0x41	; 65
 646:	09 95       	icall
					fn_Interface3.led_on(carLeds, carRED); //Turn on Car Red Led
 648:	e0 91 6d 00 	lds	r30, 0x006D	; 0x80006d <fn_Interface3>
 64c:	f0 91 6e 00 	lds	r31, 0x006E	; 0x80006e <fn_Interface3+0x1>
 650:	62 e0       	ldi	r22, 0x02	; 2
 652:	81 e4       	ldi	r24, 0x41	; 65
 654:	09 95       	icall
					//*******************************************************************************************
					fn_Interface2.led_off(pedLeds, pedYLW); //Turn off Ped Yellow Led
 656:	e0 91 69 00 	lds	r30, 0x0069	; 0x800069 <fn_Interface2>
 65a:	f0 91 6a 00 	lds	r31, 0x006A	; 0x80006a <fn_Interface2+0x1>
 65e:	61 e0       	ldi	r22, 0x01	; 1
 660:	82 e4       	ldi	r24, 0x42	; 66
 662:	09 95       	icall
					fn_Interface3.led_on(pedLeds, pedGRN); //Turn on Ped Green Led
 664:	e0 91 6d 00 	lds	r30, 0x006D	; 0x80006d <fn_Interface3>
 668:	f0 91 6e 00 	lds	r31, 0x006E	; 0x80006e <fn_Interface3+0x1>
 66c:	60 e0       	ldi	r22, 0x00	; 0
 66e:	82 e4       	ldi	r24, 0x42	; 66
 670:	09 95       	icall
					//*********************
					pedMode_iterCount++;
 672:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__data_end>
 676:	8f 5f       	subi	r24, 0xFF	; 255
 678:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__data_end>
					if(pedMode_iterCount == 2 && pressedAtState0)
 67c:	82 30       	cpi	r24, 0x02	; 2
 67e:	51 f4       	brne	.+20     	; 0x694 <__EEPROM_REGION_LENGTH__+0x294>
 680:	90 91 6f 00 	lds	r25, 0x006F	; 0x80006f <pressedAtState0>
 684:	99 23       	and	r25, r25
 686:	31 f0       	breq	.+12     	; 0x694 <__EEPROM_REGION_LENGTH__+0x294>
					{
						pedMode_active = 0;
 688:	10 92 66 00 	sts	0x0066, r1	; 0x800066 <pedMode_active>
						endOfStates = 1;
 68c:	81 e0       	ldi	r24, 0x01	; 1
 68e:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <endOfStates>
 692:	25 c0       	rjmp	.+74     	; 0x6de <__EEPROM_REGION_LENGTH__+0x2de>
					}
					else if (pedMode_iterCount == 1 && pressedAtState1)
 694:	81 30       	cpi	r24, 0x01	; 1
 696:	49 f4       	brne	.+18     	; 0x6aa <__EEPROM_REGION_LENGTH__+0x2aa>
 698:	90 91 6b 00 	lds	r25, 0x006B	; 0x80006b <pressedAtState1>
 69c:	99 23       	and	r25, r25
 69e:	29 f0       	breq	.+10     	; 0x6aa <__EEPROM_REGION_LENGTH__+0x2aa>
					{
						pedMode_active = 0;
 6a0:	10 92 66 00 	sts	0x0066, r1	; 0x800066 <pedMode_active>
						endOfStates = 1;
 6a4:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <endOfStates>
 6a8:	1a c0       	rjmp	.+52     	; 0x6de <__EEPROM_REGION_LENGTH__+0x2de>
					}
					else if (pedMode_iterCount == 1 && pressedAtState2)
 6aa:	81 30       	cpi	r24, 0x01	; 1
 6ac:	c1 f4       	brne	.+48     	; 0x6de <__EEPROM_REGION_LENGTH__+0x2de>
 6ae:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <pressedAtState2>
 6b2:	88 23       	and	r24, r24
 6b4:	a1 f0       	breq	.+40     	; 0x6de <__EEPROM_REGION_LENGTH__+0x2de>
					{
						pedMode_active = 0;
 6b6:	10 92 66 00 	sts	0x0066, r1	; 0x800066 <pedMode_active>
						endOfStates = 1;
 6ba:	81 e0       	ldi	r24, 0x01	; 1
 6bc:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <endOfStates>
 6c0:	0e c0       	rjmp	.+28     	; 0x6de <__EEPROM_REGION_LENGTH__+0x2de>
					}
				}
				else
				{
					fn_Interface2.led_off(carLeds, carYLW); //Turn off Car Yellow Led
 6c2:	e0 91 69 00 	lds	r30, 0x0069	; 0x800069 <fn_Interface2>
 6c6:	f0 91 6a 00 	lds	r31, 0x006A	; 0x80006a <fn_Interface2+0x1>
 6ca:	61 e0       	ldi	r22, 0x01	; 1
 6cc:	81 e4       	ldi	r24, 0x41	; 65
 6ce:	09 95       	icall
					fn_Interface3.led_on(carLeds, carRED); //Turn on Car Red Led
 6d0:	e0 91 6d 00 	lds	r30, 0x006D	; 0x80006d <fn_Interface3>
 6d4:	f0 91 6e 00 	lds	r31, 0x006E	; 0x80006e <fn_Interface3+0x1>
 6d8:	62 e0       	ldi	r22, 0x02	; 2
 6da:	81 e4       	ldi	r24, 0x41	; 65
 6dc:	09 95       	icall
				}	
				state++;
 6de:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <state>
 6e2:	8f 5f       	subi	r24, 0xFF	; 255
 6e4:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <state>
				break;
 6e8:	b9 c0       	rjmp	.+370    	; 0x85c <__DATA_REGION_LENGTH__+0x5c>
			case 2:
				if (pedMode_iterCount == 2 && pressedAtState0)
 6ea:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__data_end>
 6ee:	82 30       	cpi	r24, 0x02	; 2
 6f0:	39 f4       	brne	.+14     	; 0x700 <__EEPROM_REGION_LENGTH__+0x300>
 6f2:	90 91 6f 00 	lds	r25, 0x006F	; 0x80006f <pressedAtState0>
 6f6:	99 23       	and	r25, r25
 6f8:	19 f0       	breq	.+6      	; 0x700 <__EEPROM_REGION_LENGTH__+0x300>
				{
					pedMode_iterCount = 0;
 6fa:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <__data_end>
 6fe:	10 c0       	rjmp	.+32     	; 0x720 <__EEPROM_REGION_LENGTH__+0x320>
				}
				else if (pedMode_iterCount == 1 && pressedAtState1)
 700:	81 30       	cpi	r24, 0x01	; 1
 702:	39 f4       	brne	.+14     	; 0x712 <__EEPROM_REGION_LENGTH__+0x312>
 704:	90 91 6b 00 	lds	r25, 0x006B	; 0x80006b <pressedAtState1>
 708:	99 23       	and	r25, r25
 70a:	19 f0       	breq	.+6      	; 0x712 <__EEPROM_REGION_LENGTH__+0x312>
				{
					pedMode_iterCount = 0;
 70c:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <__data_end>
 710:	07 c0       	rjmp	.+14     	; 0x720 <__EEPROM_REGION_LENGTH__+0x320>
				}
				else if (pedMode_iterCount == 1 && pressedAtState2)
 712:	81 30       	cpi	r24, 0x01	; 1
 714:	29 f4       	brne	.+10     	; 0x720 <__EEPROM_REGION_LENGTH__+0x320>
 716:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <pressedAtState2>
 71a:	81 11       	cpse	r24, r1
				{
					pedMode_iterCount = 0;
 71c:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <__data_end>
				}
				if (pedMode_active)
 720:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <pedMode_active>
 724:	88 23       	and	r24, r24
 726:	31 f1       	breq	.+76     	; 0x774 <__EEPROM_REGION_LENGTH__+0x374>
				{
					fn_Interface2.led_off(carLeds, carRED); //Turn off Car Red Led
 728:	e0 91 69 00 	lds	r30, 0x0069	; 0x800069 <fn_Interface2>
 72c:	f0 91 6a 00 	lds	r31, 0x006A	; 0x80006a <fn_Interface2+0x1>
 730:	62 e0       	ldi	r22, 0x02	; 2
 732:	81 e4       	ldi	r24, 0x41	; 65
 734:	09 95       	icall
					fn_Interface3.led_on(carLeds, carYLW); //Turn on Car Yellow Led
 736:	e0 91 6d 00 	lds	r30, 0x006D	; 0x80006d <fn_Interface3>
 73a:	f0 91 6e 00 	lds	r31, 0x006E	; 0x80006e <fn_Interface3+0x1>
 73e:	61 e0       	ldi	r22, 0x01	; 1
 740:	81 e4       	ldi	r24, 0x41	; 65
 742:	09 95       	icall
					//*******************************************************************************************
					fn_Interface2.led_off(pedLeds, pedGRN); //Turn off Ped Green Led	
 744:	e0 91 69 00 	lds	r30, 0x0069	; 0x800069 <fn_Interface2>
 748:	f0 91 6a 00 	lds	r31, 0x006A	; 0x80006a <fn_Interface2+0x1>
 74c:	60 e0       	ldi	r22, 0x00	; 0
 74e:	82 e4       	ldi	r24, 0x42	; 66
 750:	09 95       	icall
					fn_Interface3.led_on(pedLeds, pedYLW); //Turn on Ped Yellow Led
 752:	e0 91 6d 00 	lds	r30, 0x006D	; 0x80006d <fn_Interface3>
 756:	f0 91 6e 00 	lds	r31, 0x006E	; 0x80006e <fn_Interface3+0x1>
 75a:	61 e0       	ldi	r22, 0x01	; 1
 75c:	82 e4       	ldi	r24, 0x42	; 66
 75e:	09 95       	icall
					//*********************
					pedMode_iterCount++;
 760:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__data_end>
 764:	8f 5f       	subi	r24, 0xFF	; 255
 766:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__data_end>
					if(pedMode_iterCount == 2)
 76a:	82 30       	cpi	r24, 0x02	; 2
 76c:	59 f5       	brne	.+86     	; 0x7c4 <__EEPROM_REGION_LENGTH__+0x3c4>
					{
						pedMode_active = 0;
 76e:	10 92 66 00 	sts	0x0066, r1	; 0x800066 <pedMode_active>
 772:	28 c0       	rjmp	.+80     	; 0x7c4 <__EEPROM_REGION_LENGTH__+0x3c4>
					}
				}
				else if (endOfStates)
 774:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <endOfStates>
 778:	88 23       	and	r24, r24
 77a:	b1 f0       	breq	.+44     	; 0x7a8 <__EEPROM_REGION_LENGTH__+0x3a8>
				{
					fn_Interface2.led_off(carLeds, carRED); //Turn off Car Red Led
 77c:	e0 91 69 00 	lds	r30, 0x0069	; 0x800069 <fn_Interface2>
 780:	f0 91 6a 00 	lds	r31, 0x006A	; 0x80006a <fn_Interface2+0x1>
 784:	62 e0       	ldi	r22, 0x02	; 2
 786:	81 e4       	ldi	r24, 0x41	; 65
 788:	09 95       	icall
					fn_Interface3.led_on(carLeds, carYLW); //Turn on Car Yellow Led
 78a:	e0 91 6d 00 	lds	r30, 0x006D	; 0x80006d <fn_Interface3>
 78e:	f0 91 6e 00 	lds	r31, 0x006E	; 0x80006e <fn_Interface3+0x1>
 792:	61 e0       	ldi	r22, 0x01	; 1
 794:	81 e4       	ldi	r24, 0x41	; 65
 796:	09 95       	icall
					//*******************************************************************************************	
					fn_Interface3.led_on(pedLeds, pedYLW); //Turn on Ped Yellow Led
 798:	e0 91 6d 00 	lds	r30, 0x006D	; 0x80006d <fn_Interface3>
 79c:	f0 91 6e 00 	lds	r31, 0x006E	; 0x80006e <fn_Interface3+0x1>
 7a0:	61 e0       	ldi	r22, 0x01	; 1
 7a2:	82 e4       	ldi	r24, 0x42	; 66
 7a4:	09 95       	icall
 7a6:	0e c0       	rjmp	.+28     	; 0x7c4 <__EEPROM_REGION_LENGTH__+0x3c4>
				}
				else
				{
					fn_Interface2.led_off(carLeds, carRED); //Turn off Car Red Led
 7a8:	e0 91 69 00 	lds	r30, 0x0069	; 0x800069 <fn_Interface2>
 7ac:	f0 91 6a 00 	lds	r31, 0x006A	; 0x80006a <fn_Interface2+0x1>
 7b0:	62 e0       	ldi	r22, 0x02	; 2
 7b2:	81 e4       	ldi	r24, 0x41	; 65
 7b4:	09 95       	icall
					fn_Interface3.led_on(carLeds, carYLW); //Turn on Car Yellow Led
 7b6:	e0 91 6d 00 	lds	r30, 0x006D	; 0x80006d <fn_Interface3>
 7ba:	f0 91 6e 00 	lds	r31, 0x006E	; 0x80006e <fn_Interface3+0x1>
 7be:	61 e0       	ldi	r22, 0x01	; 1
 7c0:	81 e4       	ldi	r24, 0x41	; 65
 7c2:	09 95       	icall
				}
				state++;
 7c4:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <state>
 7c8:	8f 5f       	subi	r24, 0xFF	; 255
 7ca:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <state>
				break;
 7ce:	46 c0       	rjmp	.+140    	; 0x85c <__DATA_REGION_LENGTH__+0x5c>
			case 3:
				if (endOfStates)
 7d0:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <endOfStates>
 7d4:	88 23       	and	r24, r24
 7d6:	a9 f0       	breq	.+42     	; 0x802 <__DATA_REGION_LENGTH__+0x2>
				{
					fn_Interface2.led_off(pedLeds, pedGRN);	fn_Interface2.led_off(pedLeds, pedYLW);
 7d8:	e0 91 69 00 	lds	r30, 0x0069	; 0x800069 <fn_Interface2>
 7dc:	f0 91 6a 00 	lds	r31, 0x006A	; 0x80006a <fn_Interface2+0x1>
 7e0:	60 e0       	ldi	r22, 0x00	; 0
 7e2:	82 e4       	ldi	r24, 0x42	; 66
 7e4:	09 95       	icall
 7e6:	e0 91 69 00 	lds	r30, 0x0069	; 0x800069 <fn_Interface2>
 7ea:	f0 91 6a 00 	lds	r31, 0x006A	; 0x80006a <fn_Interface2+0x1>
 7ee:	61 e0       	ldi	r22, 0x01	; 1
 7f0:	82 e4       	ldi	r24, 0x42	; 66
 7f2:	09 95       	icall
					fn_Interface3.led_on(pedLeds, pedRED);
 7f4:	e0 91 6d 00 	lds	r30, 0x006D	; 0x80006d <fn_Interface3>
 7f8:	f0 91 6e 00 	lds	r31, 0x006E	; 0x80006e <fn_Interface3+0x1>
 7fc:	62 e0       	ldi	r22, 0x02	; 2
 7fe:	82 e4       	ldi	r24, 0x42	; 66
 800:	09 95       	icall
				}
				if (pedMode_iterCount == 2)
 802:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__data_end>
 806:	82 30       	cpi	r24, 0x02	; 2
 808:	b9 f4       	brne	.+46     	; 0x838 <__DATA_REGION_LENGTH__+0x38>
				{
					pedMode_iterCount = 0;
 80a:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <__data_end>
					fn_Interface2.led_off(pedLeds, pedGRN);	fn_Interface2.led_off(pedLeds, pedYLW);	fn_Interface2.led_off(pedLeds, pedRED);	//Turn Off all PED's LEDs.
 80e:	e0 91 69 00 	lds	r30, 0x0069	; 0x800069 <fn_Interface2>
 812:	f0 91 6a 00 	lds	r31, 0x006A	; 0x80006a <fn_Interface2+0x1>
 816:	60 e0       	ldi	r22, 0x00	; 0
 818:	82 e4       	ldi	r24, 0x42	; 66
 81a:	09 95       	icall
 81c:	e0 91 69 00 	lds	r30, 0x0069	; 0x800069 <fn_Interface2>
 820:	f0 91 6a 00 	lds	r31, 0x006A	; 0x80006a <fn_Interface2+0x1>
 824:	61 e0       	ldi	r22, 0x01	; 1
 826:	82 e4       	ldi	r24, 0x42	; 66
 828:	09 95       	icall
 82a:	e0 91 69 00 	lds	r30, 0x0069	; 0x800069 <fn_Interface2>
 82e:	f0 91 6a 00 	lds	r31, 0x006A	; 0x80006a <fn_Interface2+0x1>
 832:	62 e0       	ldi	r22, 0x02	; 2
 834:	82 e4       	ldi	r24, 0x42	; 66
 836:	09 95       	icall
				}
				fn_Interface2.led_off(carLeds, carYLW); //Turn off Car Yellow Led
 838:	e0 91 69 00 	lds	r30, 0x0069	; 0x800069 <fn_Interface2>
 83c:	f0 91 6a 00 	lds	r31, 0x006A	; 0x80006a <fn_Interface2+0x1>
 840:	61 e0       	ldi	r22, 0x01	; 1
 842:	81 e4       	ldi	r24, 0x41	; 65
 844:	09 95       	icall
				fn_Interface3.led_on(carLeds, carGRN); //Turn on Car Green Led
 846:	e0 91 6d 00 	lds	r30, 0x006D	; 0x80006d <fn_Interface3>
 84a:	f0 91 6e 00 	lds	r31, 0x006E	; 0x80006e <fn_Interface3+0x1>
 84e:	60 e0       	ldi	r22, 0x00	; 0
 850:	81 e4       	ldi	r24, 0x41	; 65
 852:	09 95       	icall
				endOfStates = 0;
 854:	10 92 70 00 	sts	0x0070, r1	; 0x800070 <endOfStates>
				state = 0;
 858:	10 92 6c 00 	sts	0x006C, r1	; 0x80006c <state>
				break;
		}
	}
 85c:	ff 91       	pop	r31
 85e:	ef 91       	pop	r30
 860:	bf 91       	pop	r27
 862:	af 91       	pop	r26
 864:	9f 91       	pop	r25
 866:	8f 91       	pop	r24
 868:	7f 91       	pop	r23
 86a:	6f 91       	pop	r22
 86c:	5f 91       	pop	r21
 86e:	4f 91       	pop	r20
 870:	3f 91       	pop	r19
 872:	2f 91       	pop	r18
 874:	0f 90       	pop	r0
 876:	0f be       	out	0x3f, r0	; 63
 878:	0f 90       	pop	r0
 87a:	1f 90       	pop	r1
 87c:	18 95       	reti

0000087e <timer0_init_normalMode>:
// driver global variables

// function definitions
uint8_t timer0_init_normalMode(uint8_t prescaler, uint8_t initialValue)
{
	if (prescaler < 0 || prescaler > 7)
 87e:	88 30       	cpi	r24, 0x08	; 8
 880:	90 f4       	brcc	.+36     	; 0x8a6 <timer0_init_normalMode+0x28>
	else
	{
		//Set the timer0 mode to Normal mode
		//TCCR0 &= ~((1 << WGM01) | (1 << WGM00));
		//TCCR0 &= ~((1 << 3) | (1 << 6));
		CLEAR_BITS(TCCR0, (1 << 3) | (1 << 6));
 882:	93 b7       	in	r25, 0x33	; 51
 884:	97 7b       	andi	r25, 0xB7	; 183
 886:	93 bf       	out	0x33, r25	; 51
		
		//Clear the 3-least significant bits in TCCR0
		//TCCR0 &= ~((1 << CS02) | (1 << CS01) | (1 << CS00));
		//TCCR0 &= ~((1 << 2) | (1 << 1) | (1 << 0));
		CLEAR_BITS(TCCR0, (1 << 2) | (1 << 1) | (1 << 0));
 888:	93 b7       	in	r25, 0x33	; 51
 88a:	98 7f       	andi	r25, 0xF8	; 248
 88c:	93 bf       	out	0x33, r25	; 51
		
		TCNT0 = initialValue;	//Set initial value
 88e:	62 bf       	out	0x32, r22	; 50
		
		// Enable overflow interrupt
		//TIMSK0 |= (1 << TOIE0);
		//TIMSK |= (1 << 0);
		SET_BIT(TIMSK, 0);
 890:	99 b7       	in	r25, 0x39	; 57
 892:	91 60       	ori	r25, 0x01	; 1
 894:	99 bf       	out	0x39, r25	; 57
		
		SET_BIT(SREG, 7);	//Enable global interrupts
 896:	9f b7       	in	r25, 0x3f	; 63
 898:	90 68       	ori	r25, 0x80	; 128
 89a:	9f bf       	out	0x3f, r25	; 63
		TCCR0 |= prescaler;	//Set prescaler and start timer0 (start counting)
 89c:	93 b7       	in	r25, 0x33	; 51
 89e:	89 2b       	or	r24, r25
 8a0:	83 bf       	out	0x33, r24	; 51
		return 1;	//Function OK
 8a2:	81 e0       	ldi	r24, 0x01	; 1
 8a4:	08 95       	ret
// function definitions
uint8_t timer0_init_normalMode(uint8_t prescaler, uint8_t initialValue)
{
	if (prescaler < 0 || prescaler > 7)
	{
		return 0; //Function Error - wrong input
 8a6:	80 e0       	ldi	r24, 0x00	; 0
		
		SET_BIT(SREG, 7);	//Enable global interrupts
		TCCR0 |= prescaler;	//Set prescaler and start timer0 (start counting)
		return 1;	//Function OK
	}
 8a8:	08 95       	ret

000008aa <__umulhisi3>:
 8aa:	a2 9f       	mul	r26, r18
 8ac:	b0 01       	movw	r22, r0
 8ae:	b3 9f       	mul	r27, r19
 8b0:	c0 01       	movw	r24, r0
 8b2:	a3 9f       	mul	r26, r19
 8b4:	70 0d       	add	r23, r0
 8b6:	81 1d       	adc	r24, r1
 8b8:	11 24       	eor	r1, r1
 8ba:	91 1d       	adc	r25, r1
 8bc:	b2 9f       	mul	r27, r18
 8be:	70 0d       	add	r23, r0
 8c0:	81 1d       	adc	r24, r1
 8c2:	11 24       	eor	r1, r1
 8c4:	91 1d       	adc	r25, r1
 8c6:	08 95       	ret

000008c8 <_exit>:
 8c8:	f8 94       	cli

000008ca <__stop_program>:
 8ca:	ff cf       	rjmp	.-2      	; 0x8ca <__stop_program>
